syntax enable           " enable syntax processing
"colorscheme badwolf
"set termguicolors
colorscheme elflord


set number          " show line numbers
set relativenumber          " show line numbers
set showcmd             " show command in bottom bar
" set cursorline          " highlight current line

filetype indent on      " load filetype-specific indent files
set shiftwidth=2
set tabstop=2       " number of visual spaces per TAB
set softtabstop=2   " number of spaces in tab when editing
set expandtab

" set wildmenu            " visual autocomplete for command menu
" set showmatch           " highlight matching [{()}]
" set incsearch           " search as characters are entered
set hlsearch            " highlight matches

" &runtimepath
" autocmd VimEnter * nohlsearch ^d
map <C-a> :nohlsearch
command! W w " Use capitols and lowercase for read/write
command Q q "

"let g:clang_format#style_options = {
"            \ "BasedOnStyle" : "Google",
"            \ "SpacesBeforeTrailingComments" : 2,
"            \ "Standard" : "C++17"}

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_python_auto_virtualenv = 1

set makeprg=pylint\ --reports=n\ --msg-template=\"{path}:{line}:\ {msg_id}\ {symbol},\ {obj}\ {msg}\"\ %:p
let g:syntastic_python_checkers = ["python", "pylint"]

let g:ale_linters={
      \ 'python': ['pylint'],
      \}

let g:syntastic_mode_map = {
  \ "mode": "passive",
  \ "active_filetypes": ["c", "c++", "octave", "vim", "python"],
  \ "passive_filetypes": [] }

" Map auto complete of (, ", ', [
let g:pathogen_disabled = []
call add(g:pathogen_disabled, 'auto-pairs')


" copy to buffer
vmap <C-c> :w! ~/.vimbuffer<CR>
nmap <C-c> :.w! ~/.vimbuffer<CR>
" paste from buffer
map <C-p> :r ~/.vimbuffer<CR>

set shiftwidth=2
set tabstop=2
set colorcolumn=80
